



CREATE procedure [rep].[Step010_rebuild_repviews] as 

/*
Developed by:			metro
Description:			(Re)Create views on the [stg_rep] tables with meta columns: 
						- mta_BK		(Stores the Businesskey of the table)
						- mta_BKH		(Stores the hash of the Businesskey of the table)
						- mta_RH		(Stores the hash of the full row)
						- mta_RowNum	actually only needed for the view [rep].[vw_XlsTabsToLoad] so i could make an easy loop in this procedure

Change log:
Date					Author				Description
20220915 00:00			K. Vermeij			Initial version
*/
	

	Declare @LogProcName	varchar(255)	= 'Step01_rebuild_repviews'
	Declare @LogSQL			varchar(255)	
	Declare @SrcSchema		varchar(255)	= 'rep'
	Declare @TgtSchema		varchar(255)	= 'rep' 


-- variables for the loop
	Declare @CounterNr		integer
	Declare @MaxNr			integer

	Declare @sql1			varchar(8000)
	Declare @sql2			varchar(8000)
	Declare @TableName		varchar(8000)
	Declare @Msg			varchar(8000)


	If OBJECT_ID('tempdb..#XlsTabsToLoad') IS NOT NULL
	Drop Table #XlsTabsToLoad

	Select 
		*
		, mta_RowNum	= ROW_NUMBER() over ( Order By [BK] asc) 
	Into #XlsTabsToLoad
	From rep.XlsTabsToLoad
	Where BK is not null
--TODO
	--AND BK != 'AliasViews'
	--and BK != 'DataTypeMapping'
	--and BK != 'Setting'

	Select @CounterNr = min(mta_RowNum) , @MaxNr = max(mta_RowNum) 
	From  #XlsTabsToLoad
	

			While(@CounterNr IS NOT NULL
					AND @CounterNr <= @MaxNr)
			Begin

					Select
						  @TableName = c.[TABLE_NAME]
						,  @sql1=
								'if exists(select * from INFORMATION_SCHEMA.[TABLES]  v where table_schema = '''+@SrcSchema+''' and table_name=''vw_'+c.[TABLE_NAME]+''' and TABLE_TYPE=''VIEW'')'
								+char(10)
								+'drop view '+@SrcSchema+'.[vw_'+c.[TABLE_NAME]+'];'

						, @sql2=
								'create view '+@TgtSchema+'.vw_'+ c.[TABLE_NAME]+' as'
								+ char(10)
								+'/*'
								+ char(10)
								+'View is generated by  : metro'
								+ char(10)
								+'Generated at          : '+convert(varchar(19),getdate(),121) 
								+ char(10)
								+'Description           : View on stage table'
								+ char(10)
								+'*/'
								+ char(10)
								+ char(10)
								+'Select '
									
									+ char(10) + char(9)
									+ '-- List of columns:'
									+ char(10) + char(9)
									+  STRING_AGG( 'Cast(['+c.[COLUMN_NAME]+'] as varchar('+ case when c.[COLUMN_NAME] like '%desc' or c.[COLUMN_NAME] like '%script' then 'max' else '255' END+')) as ['+ c.[COLUMN_NAME]+']', ',')   WITHIN GROUP (ORDER BY t.TABLE_TYPE, c.[TABLE_NAME], c.[ORDINAL_POSITION] asc)
									+ char(10) + char(9)
									+ char(10) + char(9)
									+ '-- Meta data columns:'
									+ char(10) + char(9)
									+ ', mta_RowNum     = Row_Number() Over (Order By [BK] asc)'
									+ char(10) + char(9)
									+ ', mta_BK         = Upper(Isnull(Ltrim(Rtrim(Cast([BK] as varchar(500)))),''-''))'
									+ char(10) + char(9)
								    + ', mta_BKH        = Convert(char(64),(hashbytes(''sha2_512'','
									+ char(10) + char(9) + char(9) +char(9) + char(9) + char(9) + char(9) + char(9) + char(9)
									+ 'Upper(Isnull(Ltrim(Rtrim(Cast([BK] as varchar(500)))),''-''))'
									+ char(10) + char(9) + char(9)+ char(9) + char(9) + char(9) + char(9) + char(9)
									+ ')),2)'
									+ char(10) + char(9)
									+ ', mta_RH         = Convert(char(64),(Hashbytes(''sha2_512'',upper(' 
									+ char(10) + char(9) + char(9) +char(9)+ char(9) + char(9) + char(9) + char(9) + char(9)
									+ STRING_AGG( 'isnull(ltrim(rtrim(cast(['+c.[COLUMN_NAME]+']as varchar('+ case when c.[COLUMN_NAME] like '%desc' or c.[COLUMN_NAME] like '%script' then '8000' else '255' END+'))	)),''-'')', '+''|''+')   WITHIN GROUP (ORDER BY t.TABLE_TYPE, c.[TABLE_NAME], c.[ORDINAL_POSITION] asc)
									+ char(10) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9)
									+ '))),2)	'
									+ char(10) + char(9)
									+', mta_Source     = mta_Source'
									+ char(10) + char(9)
									+', mta_Loaddate   = Cast(mta_LoadDate as datetime2)'

								+ char(10)
								+'From '+@SrcSchema+'.['+ c.[TABLE_NAME]+']'
								+ char(10)
								+'Where 1=1'
								+ char(10)+char(9)
								
								+ 'and isnull(Active,''1'') = ''1'' ' 
								+ char(10)+char(9) 
								+ 'and isnull([BK],'''') != ''''	;'
						
	
					From [INFORMATION_SCHEMA].[COLUMNS] c
					join INFORMATION_SCHEMA.[TABLES] t on c.TABLE_SCHEMA = t.TABLE_SCHEMA and c.TABLE_NAME = t.TABLE_NAME
					join #XlsTabsToLoad xt on c.TABLE_NAME = xt.[TableName]
					Where 1=1
						and t.TABLE_TYPE	= 'BASE TABLE'
						and t.TABLE_SCHEMA	= @TgtSchema
						and c.COLUMN_NAME	!= 'mta_Source'
						and c.COLUMN_NAME	!= 'mta_LoadDate'
						and xt.[TableName]	!= 'XlsTabsToLoad'
						and xt.mta_RowNum	= @CounterNr
					Group by
					 c.[TABLE_NAME]
 
				-- drop views if exists
							Print	('')
							Print	(@sql1)
							Exec	(@sql1)
							Set		@Msg = 'Drop view '+ISNULL(@TgtSchema,'')+ISNULL('.vw_'+@TableName,'')
							Exec	[aud].[proc_Log_Procedure]
											@LogAction		= 'DROP', 
											@LogNote		= @Msg,
											@LogProcedure	= @LogProcName,
											@LogSQL			= @sql1,
											@LogRowCount	= 1

				-- create views
							Print	('')
							Print	(@sql2)
							Exec	(@sql2)
							Set		@Msg = 'Create view '+ISNULL(@TgtSchema,'')+ISNULL('.vw_'+@TableName,'')
							Exec	[aud].[proc_Log_Procedure]
											@LogAction		= 'CREATE', 
											@LogNote		= @Msg,
											@LogProcedure	= @LogProcName,
											@LogSQL			= @sql2,
											@LogRowCount	= 1
						
						set @CounterNr  = @CounterNr  + 1        
					End

Set @LogSQL = 'exec ' +@TgtSchema+'.'+@LogProcName

Exec [aud].[proc_Log_Procedure]
	@LogAction		= 'INFO', 
	@LogNote		= '(Re)Created views on the [stg_rep] tables with meta columns',
	@LogProcedure	= @LogProcName,
	@LogSQL			= @LogSQL,
	@LogRowCount	= @MaxNr