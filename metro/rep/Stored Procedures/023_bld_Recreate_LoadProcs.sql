CREATE PROCEDURE [rep].[023_bld_Recreate_LoadProcs]  @tgt_table_name VARCHAR(255) = NULL
AS
/*
Developed by:			metro

Description:
    This stored procedure (re)creates stored procedures to load data into [bld] tables.

Parameters:
    @tgt_table_name VARCHAR(255) = NULL  -- Target table name to filter the creation process. If null, all procedures will be recreated.

Example Usage:
    exec [rep].[023_bld_Recreate_LoadProcs]
    exec [rep].[023_bld_Recreate_LoadProcs] @tgt_table_name = 'Schema'

Procedure Logic:
    1. Initializes variables for logging, schema names, and SQL statements.
    2. Drops the temporary table #BuildProcs if it exists.
    3. Creates a temporary table #BuildProcs with row numbers.
    4. Iterates through the rows in the temporary table and processes each table to recreate stored procedures.
    5. Logs the progress and any errors encountered during the execution.

AST:
Procedure: [rep].[023_bld_Recreate_LoadProcs]
  Parameters:
    - @tgt_table_name: VARCHAR(255) = NULL
  Variables:
    - @LogProcName: VARCHAR(MAX)
    - @LogNote: VARCHAR(MAX)
    - @LogSQL: VARCHAR(MAX)
    - @SrcSchema: VARCHAR(MAX)
    - @TgtSchema: VARCHAR(MAX)
    - @SmartLoad: VARCHAR(MAX)
    - @LB: VARCHAR(MAX)
    - @CounterNr: INT
    - @MaxNr: INT
    - @sql1: VARCHAR(MAX)
    - @sql2: VARCHAR(MAX)
    - @sql2a: VARCHAR(MAX)
    - @sql2b: VARCHAR(MAX)
    - @sql2c: VARCHAR(MAX)
    - @LongSql: VARCHAR(MAX)
    - @SrcDataset: VARCHAR(MAX)
    - @TableName: VARCHAR(MAX)
    - @RoutineNameFull: VARCHAR(MAX)
    - @RoutineNameShort: VARCHAR(MAX)
    - @Msg: VARCHAR(MAX)
  Logic:
    - Try Block:
      - Drop temporary table if it exists
      - Create temporary table with row numbers
      - Additional logic to recreate stored procedures
    - Catch Block:
      - Error handling logic

Mermaid Diagram:
graph TD
    A[Start] --> B[Initialize Variables]
    B --> C{Drop #BuildProcs if exists}
    C --> D[Create #BuildProcs with row numbers]
    D --> E{Iterate through rows}
    E --> F[Process each table to recreate stored procedures]
    F --> G[Log progress and errors]
    G --> H[End]
    C --> I[Error Handling] --> H
	
Change log:
Date					Author				Description
20220915 00:00			K. Vermeij			Initial version
*/
DECLARE @LogProcName varchar(MAX) = '023_bld_Recreate_LoadProcs'
DECLARE @LogNote varchar(MAX) = '(Re)Create Stored Procedures to load data into [bld] '
DECLARE @LogSQL varchar(MAX)
DECLARE @SrcSchema varchar(MAX) = 'bld'
DECLARE @TgtSchema varchar(MAX) = 'bld'
DECLARE @SmartLoad varchar(MAX) = '0'
DECLARE @LB varchar(MAX) = char(10) + char(9)
-- variables for the loop
DECLARE @CounterNr integer
DECLARE @MaxNr integer
DECLARE @sql1 varchar(MAX)
DECLARE @sql2 varchar(MAX)
DECLARE @sql2a varchar(MAX)
DECLARE @sql2b varchar(MAX)
DECLARE @sql2c varchar(MAX)
DECLARE @LongSql varchar(MAX)
DECLARE @SrcDataset varchar(MAX)
DECLARE @TableName varchar(MAX)
DECLARE @RoutineNameFull varchar(MAX)
DECLARE @RoutineNameShort varchar(MAX)
DECLARE @Msg varchar(MAX)

IF OBJECT_ID('tempdb..#BuildProcs') IS NOT null
	DROP TABLE #BuildProcs;

WITH base
AS (
	SELECT table_catalog = t.[TABLE_CATALOG]
		,src_table_schema = t.[TABLE_SCHEMA]
		,src_table_name = t.[TABLE_NAME]
		,src_table_type = t.[TABLE_TYPE]
		,tgt_table_name = rep.[GetNamePart](replace(t.[TABLE_NAME], 'tr_', ''), 2)
		,Dataset = Replace(t.[TABLE_NAME], 'tr_', '')
		,RowNum = ROW_NUMBER() OVER (
			ORDER BY t.[TABLE_NAME]
			)
		,SmartLoad = iif(c.column_name = 'mta_RecType', '1', '0')
	FROM [INFORMATION_SCHEMA].[TABLES] t
	LEFT JOIN [INFORMATION_SCHEMA].[COLUMNS] c ON c.TABLE_SCHEMA = t.[TABLE_SCHEMA]
		AND c.TABLE_NAme = t.[TABLE_NAME]
		AND c.column_name = 'mta_RecType'
	WHERE 1 = 1
		AND TABLE_TYPE = 'VIEW'
		AND LEFT(t.[TABLE_NAME], 3) = 'tr_'
		AND t.TABLE_SCHEMA = @SrcSchema
		AND ( rep.[GetNamePart](replace(t.[TABLE_NAME], 'tr_', ''), 2) = @tgt_table_name OR @tgt_table_name IS null)
	)
SELECT *
INTO #BuildProcs
FROM base

SELECT @CounterNr = min(RowNum)
	,@MaxNr = max(RowNum)
FROM #BuildProcs

WHILE (
		@CounterNr IS NOT null
		AND @CounterNr <= @MaxNr
		)
BEGIN
	SELECT @TableName = src.tgt_table_name
		,@SrcDataset = src.src_table_name
		,@SmartLoad = src.SmartLoad
		,@RoutineNameShort = 'load_' + src.Dataset
		,@RoutineNameFull = '[' + @TgtSchema + '].[load_' + src.Dataset + ']'
		,@sql1
		= 'if exists(select * from INFORMATION_SCHEMA.[ROUTINES] where [ROUTINE_SCHEMA] = '''
		+ @TgtSchema
		+ ''' and [ROUTINE_NAME] =  '''
		+ @RoutineNameShort
		+ ''')'
		+ char(10)
		+ 'drop procedure '
		+ @RoutineNameFull
		+ ';'
		,@sql2a = 
					  @LB + 'create proc ' + @RoutineNameFull + ' as' 
					+ @LB + '/*' 
					+ @LB + 'Proc is generated by	: metro' 
					+ @LB + 'Generated at			: ' + CONVERT(varchar(19), getdate(), 121) 
					+ @LB + iif(@SmartLoad = 1, 'makes use of Smartload!', '') 
					+ @LB + 'exec ' + @RoutineNameFull + '' + '*/' + char(10) 
					+ @LB 
					+ @LB + 'Declare @RoutineName	varchar(8000)	= ''' + @RoutineNameShort + '''' 
					+ @LB + 'Declare @StartDateTime	datetime2		=  getutcdate()' 
					+ @LB + 'Declare @EndDateTime	datetime2		' 
					+ @LB + 'Declare @Duration		bigint' + char(10) + char(10) + char(10) 
					+ @LB + '-- Create a helper temp table'
					+ @LB + 'If OBJECT_ID(''tempdb..#' + src.Dataset + ''') IS NOT NULL ' 
					+ @LB + 'Drop Table #' + src.Dataset + ' ;' 
					+ @LB + 'Print ''-- create temp table:''' 
					+ @LB + 'Select' 
					+ @LB + '  mta_BK'	+ char(9) + char(9) + '= src.[BK]' 
					+ @LB + ', mta_BKH' + char(9) + char(9) + '= Convert(char(64),(Hashbytes(''sha2_512'',upper(src.BK) )),2)' 
					+ @LB + ', mta_RH'	+ char(9) + char(9) + '= Convert(char(64),(Hashbytes(''sha2_512'',upper('
					+ @LB
					+ char(9)
					+ char(9)
					+ char(9)
					+ char(9)
					+ char(9)
					+ char(9)
					+ char(9)
					+ STRING_AGG('ISNULL(Cast(src.[' + c.[COLUMN_NAME] + '] as varchar(8000)),''-'') ', '+''|''+') WITHIN
							GROUP (
									ORDER BY src.tgt_table_name
										,c.[ORDINAL_POSITION] ASC
									)
									+ @LB + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + '))),2)'
									+ @LB
									+ ', mta_Source'
									+ char(9)
									+ '= ''['
									+ @TgtSchema
									+ '].['
									+ src.src_table_name
									+ ']'''
									+ @LB
									+ ', mta_RecType'
									+ char(9)
									+ '= '
									+ iif(@SmartLoad = 1, 'diff.RecType', 'case 
												when tgt.[BK] is null then 1
												when tgt.[mta_RH] !=  Convert(char(64),(Hashbytes(''sha2_512'',upper(' + STRING_AGG('ISNULL(Cast(src.[' + c.[COLUMN_NAME] + '] as varchar(8000)),''-'') ', '+''|''+') WITHIN GROUP (
										ORDER BY src.tgt_table_name
											,c.[ORDINAL_POSITION] ASC
										) + '))),2)' 
								+ @LB + char(9) + char(9) + char(9) + char(9) + char(9) + 'then 0' 
								+ @LB + char(9) + char(9) + char(9) + char(9) + char(9) + 'else -99 end' 
								+ @LB	) 
					+ @LB + 'Into #' + src.Dataset 
					+ @LB + 'From [' + @TgtSchema + '].[' + src.src_table_name + '] src' 
					+ @LB + 'Left join [' + @TgtSchema + '].[vw_' + src.tgt_table_name + '] tgt on src.[BK] = tgt.[BK]' 
					+ @LB + iif(@SmartLoad = 1, 'join [bld].[vw_' + src.tgt_table_name + 'SmartLoad] diff on diff.code =  src.code', '') 
					+ @LB + iif(@SmartLoad = 1, 'where 1=1  and  cast(diff.RecType as int) > -99', '') 
					+ @LB 
					+ @LB + 'Create Clustered INDEX [IX_' + src.src_table_name + '] ON #' + src.Dataset + '( [mta_BKH] ASC,[mta_RH] ASC)' 
					+ @LB 
					+ @LB 
					+ @LB + '--------------------- start loading data' 
					+ @LB 
					+ @LB + 'Print ''-- new records:''' 
					+ @LB 
					+ @LB + 'set @StartDateTime = getdate()' 
					+ @LB 
					+ @LB + 'Insert Into [' + @TgtSchema + '].[' + src.tgt_table_name + ']' 
					+ @LB + '( ' 
					+ @LB + char(9) + STRING_AGG('[' + c.[COLUMN_NAME] + '] ', ',') WITHIN
									GROUP (
											ORDER BY src.tgt_table_name
												,c.[ORDINAL_POSITION] ASC
											) 
									+ @LB + char(9) + ', [mta_BK], [mta_BKH], [mta_RH], [mta_Source], [mta_RecType]' + ') ' 
									+ @LB + 'select ' 
									+ @LB + char(9) + STRING_AGG('src.[' + c.[COLUMN_NAME] + '] ', ',') WITHIN
									GROUP (
											ORDER BY src.tgt_table_name
												,c.[ORDINAL_POSITION] ASC
									) 
					+ @LB + char(9) + ', h.[mta_BK], h.[mta_BKH], h.[mta_RH], h.[mta_Source], h.[mta_RecType]' 
					+ @LB + 'From  [' + @SrcSchema + '].[' + src.src_table_name + '] src' 
					+ @LB + 'Join #' + src.Dataset + ' h on h.[mta_BK] = src.[BK]' 
					+ @LB + 'Left Join [' + @TgtSchema + '].[vw_' + src.tgt_table_name + '] tgt on h.[mta_BKH] = tgt.[mta_BKH] ' 
					+ @LB + 'Where 1=1 and cast(h.mta_RecType as int) = 1 and tgt.[mta_BKH] is null' 
					+ @LB
					+ @LB 
					+ @LB + 'set @EndDateTime = getutcdate()'
					+ @LB +
							'exec [aud].[proc_Log_Procedure]  
							@LogAction		= ''INSERT - NEW'', 
							@LogNote		= ''New Records'',
							@LogProcedure	= @RoutineName,
							@LogSQL			= ''Insert Into [' + @TgtSchema + '].[' + src.tgt_table_name + ']'',
							@LogRowCount	= @@ROWCOUNT,
							@Log_TimeStart  = @StartDateTime,
							@Log_TimeEnd    = @EndDateTime;' 
					+ @LB 
					+ @LB + 'Print ''-- changed records:''' 
					+ @LB + 'set @StartDateTime = getdate()' 
					+ @LB 
					+ @LB + char(9) + 'Insert Into [' + @TgtSchema + '].[' + src.tgt_table_name + ']' 
					+ @LB + '( ' 
					+ @LB + char(9) + STRING_AGG('[' + c.[COLUMN_NAME] + '] ', ',') WITHIN
									GROUP (
											ORDER BY src.tgt_table_name
												,c.[ORDINAL_POSITION] ASC
											) 
					+ @LB + char(9) + ', [mta_BK], [mta_BKH], [mta_RH], [mta_Source], [mta_RecType]' + ') ' 
					+ @LB + 'select ' 
					+ @LB + char(9) + STRING_AGG('src.[' + c.[COLUMN_NAME] + '] ', ',') WITHIN
										GROUP (
												ORDER BY src.tgt_table_name
													,c.[ORDINAL_POSITION] ASC
												) + char(10) + char(9) + char(9) + ', h.[mta_BK], h.[mta_BKH], h.[mta_RH], h.[mta_Source], h.[mta_RecType]' 
												+ @LB + 'From  [' + @SrcSchema + '].[' + src.src_table_name + '] src'
												+ @LB + 'Join #' + src.Dataset + ' h on h.[mta_BK] = src.[BK]'
												+ @LB + 'Where 1=1 and cast(h.mta_RecType as int) = 0' + char(10) 
												+ @LB 
												+ @LB +
											'set @EndDateTime = getutcdate()'
											+ @LB +
												'exec [aud].[proc_Log_Procedure]  
												@LogAction		= ''INSERT - CHG'', 
												@LogNote		= ''Changed Records'',
												@LogProcedure	= @RoutineName,
												@LogSQL			= ''Insert Into [' + @TgtSchema + '].[' + src.tgt_table_name + ']'',
												@LogRowCount	= @@ROWCOUNT,
												@Log_TimeStart  = @StartDateTime,
												@Log_TimeEnd    = @EndDateTime;' 
												+ @LB 
												+ @LB + 'Print ''-- deleted records:''' 
												+ @LB 
												+ @LB +'set @StartDateTime = getdate()' 
												+ @LB 
												+ @LB + 'Insert Into [' + @TgtSchema + '].[' + src.tgt_table_name + ']' 
												+ @LB 
												+ @LB +'( ' 
												+ @LB 
												+ @LB + char(9) + STRING_AGG('[' + c.[COLUMN_NAME] + '] ', ',') WITHIN
																	GROUP (
																			ORDER BY src.tgt_table_name
																				,c.[ORDINAL_POSITION] ASC
																			) 
																			+ @LB + char(9) + ', [mta_BK], [mta_BKH], [mta_RH], [mta_Source], [mta_RecType]' + ') ' 
																			+ @LB +'select ' 
																			+ @LB + char(9) + STRING_AGG('src.[' + c.[COLUMN_NAME] + '] ', ',') WITHIN
																	GROUP (
																			ORDER BY src.tgt_table_name
																				,c.[ORDINAL_POSITION] ASC
																			)
											+ @LB + char(9) + ', src.[mta_BK], src.[mta_BKH], src.[mta_RH], src.[mta_Source], [mta_RecType] = -1' 
											+ @LB + 'From  [' + @TgtSchema + '].[vw_' + src.tgt_table_name + '] src' 
											+ @LB + 'Left Join #' + src.Dataset + ' h on h.[mta_BKH] = src.[mta_BKH] and h.[mta_Source] = src.[mta_Source]' 
											+ @LB + 'Where 1=1 and h.[mta_BKH] is null and  src.mta_Source = ''[' + @TgtSchema + '].[' + src.src_table_name + ']'''
											+ @LB + iif(@SmartLoad = 1, 'and  h.mta_RecType =-1', '') 
											+ @LB 
											+ @LB +
											'set @EndDateTime = getutcdate()'
											+ @LB +
												'exec [aud].[proc_Log_Procedure]  
												@LogAction		= ''INSERT - DEL'', 
												@LogNote		= ''Changed Deleted'',
												@LogProcedure	= @RoutineName,
												@LogSQL			= ''Insert Into [' + @TgtSchema + '].[' + src.tgt_table_name + ']'',
												@LogRowCount	= @@ROWCOUNT,
												@Log_TimeStart  = @StartDateTime,
												@Log_TimeEnd    = @EndDateTime
												;' + @LB + @LB 
		,@sql2b = ''
		,@sql2c = '-- Clean up ...' 
					+ @LB + 'If OBJECT_ID(''tempdb..#' + src.Dataset + ''') IS NOT NULL ' + char(10) + 'Drop Table #' + src.Dataset + ';' 
					+ @LB 
					+ @LB + 'set @EndDateTime =  getutcdate()' 
					+ @LB + 'set @Duration = datediff(ss,@StartDateTime, @EndDateTime)' 
					+ @LB + 'print ''Load "' + @RoutineNameShort + '" took '' +cast(@Duration as varchar(10))+ '' second(s)''' 
					+ @LB 
	--select *
	FROM #BuildProcs src
	JOIN [INFORMATION_SCHEMA].[COLUMNS] c ON c.TABLE_SCHEMA = src.src_table_schema
		AND c.TABLE_NAme = src.src_table_name
	WHERE 1 = 1
		AND LEFT(C.Column_Name, 3) != 'mta'
		AND c.COLUMN_NAME != src.tgt_table_name + 'Id'
		AND src.RowNum = @CounterNr
	GROUP BY src.src_table_name
		,src.tgt_table_name
		,src.Dataset
		,src.SmartLoad

	-- Drop load procedure
	PRINT (@sql1)

	EXEC (@sql1)

	SET @Msg = 'Drop Load proc ' + @LogProcName

	EXEC [aud].[proc_Log_Procedure] @LogAction = 'DROP'
		,@LogNote = @Msg
		,@LogProcedure = @LogProcName
		,@LogSQL = @sql1
		,@LogRowCount = 1

	-- create load procedure
	SET @LongSql = @sql2a + @sql2b + @sql2c

	EXEC rep.Helper_LongPrint @string = @LongSql

	EXEC (@LongSql)

	SET @Msg = 'Load proc ' + @LogProcName

	EXEC [aud].[proc_Log_Procedure] @LogAction = 'CREATE'
		,@LogNote = @Msg
		,@LogProcedure = @LogProcName
		,@LogSQL = @sql2
		,@LogRowCount = 1

	SET @CounterNr = @CounterNr + 1
END

SET @LogSQL = 'exec ' + @TgtSchema + '.' + @LogProcName

EXEC [aud].[proc_Log_Procedure] @LogAction = 'INFO'
	,@LogNote = @LogNote
	,@LogProcedure = @LogProcName
	,@LogSQL = @LogSQL
	,@LogRowCount = @MaxNr

-- Cleaning
IF OBJECT_ID('tempdb..#BuildProcs') IS NOT null
	DROP TABLE #BuildProcs;