
CREATE PROCEDURE [rep].[010_rep_recreate_repviews_kim_to_fix] AS BEGIN /*
    Developed by:            metro
    Description:             (Re)Create views on the [stg_rep] tables with meta columns:
                             - mta_BK        (Stores the Businesskey of the table)
                             - mta_BKH       (Stores the hash of the Businesskey of the table)
                             - mta_RH        (Stores the hash of the full row)
                             - mta_RowNum    actually only needed for the view [rep].[vw_XlsTabsToLoad] so i could make an easy loop in this procedure

    Change log:
    Date                    Author              Description
    20220915 00:00          K. Vermeij          Initial version
    */ DECLARE @logprocname varchar(MAX) = '[rep].[010_rep_Recreate_RepViews]' DECLARE @logsql varchar(MAX) DECLARE @srcschema varchar(MAX) = 'rep' DECLARE @tgtschema varchar(MAX) = 'rep' DECLARE @counternr INT DECLARE @maxnr INT DECLARE @sqldrop nvarchar(MAX) DECLARE @sqlcreate nvarchar(MAX) DECLARE @tablename varchar(MAX) DECLARE @msg varchar(MAX) DECLARE @columnlist nvarchar(MAX) DECLARE @columnhashlist nvarchar(MAX) BEGIN try -- Drop temporary table if it exists
 IF object_id('tempdb..#XlsTabsToLoad') IS NOT NULL
DROP TABLE #xlstabstoload -- Create temporary table with row numbers

SELECT tablename AS TABLE_NAME,

       bk,

       row_number() OVER (
                          ORDER BY [bk] ASC) AS mta_rownum INTO #xlstabstoload

  FROM rep.xlstabstoload

 WHERE bk IS NOT NULL

   AND tablename like '%trn%' -- Initialize loop variables

  SELECT @counternr = min(mta_rownum),

       @maxnr = max(mta_rownum)

  FROM #xlstabstoload -- Define the view creation template
 DECLARE @viewtemplate nvarchar(MAX) = '
    CREATE OR ALTER VIEW [{TgtSchema}].[vw_{TableName}] AS
    /*
    View is generated by  : metro
    Generated at          : {GeneratedAt}
    Description           : View on stage table
    */
    SELECT 
        -- List of columns:
        {ColumnList},
        -- Meta data columns:
        mta_RowNum     = ROW_NUMBER() OVER (ORDER BY [BK] ASC),
        mta_BK         = UPPER(ISNULL(LTRIM(RTRIM(CAST([BK] AS VARCHAR(500)))),''-'')),
        mta_BKH        = CONVERT(CHAR(64), HASHBYTES(''SHA2_512'', UPPER(ISNULL(LTRIM(RTRIM(CAST([BK] AS VARCHAR(500)))),''-''))), 2),
        mta_RH         = CONVERT(CHAR(64), HASHBYTES(''SHA2_512'', UPPER({ColumnHashList})), 2)
    FROM [{SrcSchema}].[{TableName}]
    WHERE 1=1
      AND ISNULL(Active,''1'') = ''1''
      AND ISNULL(LTRIM(RTRIM([BK])),'''') != ''''
    ' -- Loop through each row in the temporary table
 WHILE @counternr <= @maxnr BEGIN -- Get the current table name

  SELECT @tablename = TABLE_NAME

  FROM #xlstabstoload

 WHERE mta_rownum = @counternr -- Generate the column list with transformations

    SELECT @columnlist = string_agg('ISNULL(LTRIM(RTRIM(CAST([' + COLUMN_NAME + '] AS VARCHAR(' + CASE
                                                                                                      WHEN c.[column_name] like '%desc'
                                                                                                           OR c.[column_name] like '%expression'
                                                                                                           OR c.[column_name] like '%script'
                                                                                                           OR c.[column_name] like '%RecordSrcDate'
                                                                                                           OR c.[column_name] like '%BusinessDate'
                                                                                                           OR c.[column_name] like '%value' THEN 'max'
                                                                                                      ELSE '255'
                                                                                                  END + ')))) as [' + c.[column_name] + ']', ',')

  FROM information_schema.columns c
 WHERE table_schema = @srcschema

   AND TABLE_NAME = @tablename -- Generate the column hash list

    SELECT @columnhashlist = string_agg('ISNULL(LTRIM(RTRIM(CAST([' + COLUMN_NAME + '] AS VARCHAR(' + CASE
                                                                                                          WHEN c.[column_name] like '%desc'
                                                                                                               OR c.[column_name] like '%expression'
                                                                                                               OR c.[column_name] like '%script'
                                                                                                               OR c.[column_name] like '%RecordSrcDate'
                                                                                                               OR c.[column_name] like '%BusinessDate'
                                                                                                               OR c.[column_name] like '%value' THEN '8000'
                                                                                                          ELSE '255'
                                                                                                      END + ')))),''-'')', ' + ''|'' + ')

  FROM information_schema.columns c
 WHERE table_schema = @srcschema

   AND TABLE_NAME = @tablename -- Replace placeholders in the view template

   SET @sqlcreate = replace(replace(replace(replace(replace(replace(@viewtemplate, '{SrcSchema}', @srcschema), '{TgtSchema}', @tgtschema), '{TableName}', @tablename), '{ColumnList}', @columnlist), '{ColumnHashList}', @columnhashlist), '{GeneratedAt}', convert(VARCHAR, getdate(), 120)) -- Create the new view
 PRINT @sqlcreate EXEC sp_executesql @sqlcreate -- Move to the next row

   SET @counternr = @counternr + 1 END -- Log the procedure execution

   SET @logsql = 'exec ' + @tgtschema + '.' + @logprocname EXEC [aud].[proc_log_procedure] @logaction = 'INFO',

       @lognote = '(Re)Created views on the [stg_rep] tables with meta columns',

       @logprocedure = @logprocname,

       @logsql = @logsql,

       @logrowcount = @maxnr END try BEGIN catch -- Handle errors
 DECLARE @errormessage nvarchar(4000) = error_message() DECLARE @errorseverity INT = error_severity() DECLARE @errorstate INT = error_state() raiserror (@errormessage, @errorseverity, @errorstate) END catch END
