

CREATE procedure [rep].[010_rep_Recreate_RepViews_backup]
as
/*
Developed by:			metro
Description:			(Re)Create views on the [stg_rep] tables with meta columns: 
						- mta_BK		(Stores the Businesskey of the table)
						- mta_BKH		(Stores the hash of the Businesskey of the table)
						- mta_RH		(Stores the hash of the full row)
						- mta_RowNum	actually only needed for the view [rep].[vw_XlsTabsToLoad] so i could make an easy loop in this procedure

Change log:
Date					Author				Description
20220915 00:00			K. Vermeij			Initial version
*/
declare @LogProcName varchar(max) = '[rep].[010_rep_Recreate_RepViews]'
declare @LogSQL varchar(max)
declare @SrcSchema varchar(max) = 'rep'
declare @TgtSchema varchar(max) = 'rep'
-- variables for the loop
declare @CounterNr integer
declare @MaxNr integer
declare @sql1 varchar(max)
declare @sql2 varchar(max)
declare @TableName varchar(max)
declare @Msg varchar(max)

if OBJECT_ID('tempdb..#XlsTabsToLoad') is not null
	drop table #XlsTabsToLoad

select *
	,mta_RowNum = ROW_NUMBER() over (
		order by [BK] asc
		)
into #XlsTabsToLoad
from rep.XlsTabsToLoad
where BK is not null


select @CounterNr = min(mta_RowNum)
	,@MaxNr = max(mta_RowNum)
from #XlsTabsToLoad

while (
		@CounterNr is not null
		and @CounterNr <= @MaxNr
		)
begin
	select @TableName = c.[TABLE_NAME]
		,@sql1 = 'if exists(select * from INFORMATION_SCHEMA.[TABLES]  v where table_schema = ''' + @SrcSchema + ''' and table_name=''vw_' + c.[TABLE_NAME] + ''' and TABLE_TYPE=''VIEW'')' + char(10) + 'drop view ' + @SrcSchema + '.[vw_' + c.[TABLE_NAME] + '];'
		,@sql2 = 'create view ' + @TgtSchema + '.vw_' + c.[TABLE_NAME] + ' as' + char(10) + '/*' + char(10) + 'View is generated by  : metro' + char(10) + 'Generated at          : ' + convert(varchar(19), getdate(), 121) + char(10) + 'Description           : View on stage table' + char(10) + '*/' + char(10) + char(10) + 'Select ' + char(10) + char(9) + '-- List of columns:' + char(10) + char(9) + STRING_AGG('Ltrim(Rtrim(Cast([' + c.[COLUMN_NAME] + '] as varchar(' + case 
				when c.[COLUMN_NAME] like '%desc'
					or c.[COLUMN_NAME] like '%expression'
					or c.[COLUMN_NAME] like '%script'
					or c.[COLUMN_NAME] like '%RecordSrcDate'
					or c.[COLUMN_NAME] like '%BusinessDate'
					or c.[COLUMN_NAME] like '%value'
					then 'max'
				else '255'
				end + ')))) as [' + c.[COLUMN_NAME] + ']', ',') WITHIN
	group (
			order by t.TABLE_TYPE
				,c.[TABLE_NAME]
				,c.[ORDINAL_POSITION] asc
			) + char(10) + char(9) + char(10) + char(9) + '-- Meta data columns:' + char(10) + char(9) + ', mta_RowNum     = Row_Number() Over (Order By [BK] asc)' + char(10) + char(9) + ', mta_BK         = Upper(Isnull(Ltrim(Rtrim(Cast([BK] as varchar(500)))),''-''))' + char(10) + char(9) + ', mta_BKH        = Convert(char(64),(hashbytes(''sha2_512'',' + char(10) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + 'Upper(Isnull(Ltrim(Rtrim(Cast([BK] as varchar(500)))),''-''))' + char(10) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + ')),2)' + char(10) + char(9) + ', mta_RH         = Convert(char(64),(Hashbytes(''sha2_512'',upper(' + char(10) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + STRING_AGG('isnull(ltrim(rtrim(cast([' + c.[COLUMN_NAME] + ']as varchar(' + case 
				when c.[COLUMN_NAME] like '%desc'
					or c.[COLUMN_NAME] like '%script'
					then '8000'
				else '255'
				end + '))	)),''-'')', '+''|''+') WITHIN
	group (
			order by t.TABLE_TYPE
				,c.[TABLE_NAME]
				,c.[ORDINAL_POSITION] asc
			) + char(10) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + char(9) + '))),2)	' + char(10) + char(9) + ', mta_Source     = mta_Source' + char(10) + char(9) + ', mta_Loaddate   = Cast(mta_LoadDate as datetime2)' + char(10) + 'From ' + @SrcSchema + '.[' + c.[TABLE_NAME] + ']' + char(10) + 'Where 1=1' + char(10) + char(9) + 'and isnull(Active,''1'') = ''1'' ' + char(10) + char(9) + 'and isnull([BK],'''') != ''''	;'
	from [INFORMATION_SCHEMA].[COLUMNS] c
	join [INFORMATION_SCHEMA].[TABLES] t on c.TABLE_SCHEMA = t.TABLE_SCHEMA
		and c.TABLE_NAME = t.TABLE_NAME
	join #XlsTabsToLoad xt on c.TABLE_NAME = xt.TableName
	where 1 = 1
		and t.TABLE_TYPE = 'BASE TABLE'
		and t.TABLE_SCHEMA = @TgtSchema
		and c.COLUMN_NAME != 'mta_Source'
		and c.COLUMN_NAME != 'mta_LoadDate'
		and xt.TableName != 'XlsTabsToLoad'
		and xt.mta_RowNum = @CounterNr
	group by c.[TABLE_NAME]

	-- drop views if exists
	print ('')
	print (@sql1)

	exec (@sql1)

	set @Msg = 'Drop view ' + ISNULL(@TgtSchema, '') + ISNULL('.vw_' + @TableName, '')

	exec [aud].[proc_Log_Procedure] @LogAction = 'DROP'
		,@LogNote = @Msg
		,@LogProcedure = @LogProcName
		,@LogSQL = @sql1
		,@LogRowCount = 1

	-- create views
	print ('')
	print (@sql2)

	exec (@sql2)

	set @Msg = 'Create view ' + ISNULL(@TgtSchema, '') + ISNULL('.vw_' + @TableName, '')

	exec [aud].[proc_Log_Procedure] @LogAction = 'CREATE'
		,@LogNote = @Msg
		,@LogProcedure = @LogProcName
		,@LogSQL = @sql2
		,@LogRowCount = 1

	set @CounterNr = @CounterNr + 1
end

set @LogSQL = 'exec ' + @TgtSchema + '.' + @LogProcName

exec [aud].[proc_Log_Procedure] @LogAction = 'INFO'
	,@LogNote = '(Re)Created views on the [stg_rep] tables with meta columns'
	,@LogProcedure = @LogProcName
	,@LogSQL = @LogSQL
	,@LogRowCount = @MaxNr