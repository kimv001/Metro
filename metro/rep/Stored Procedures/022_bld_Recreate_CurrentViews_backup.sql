create procedure [rep].[022_bld_Recreate_CurrentViews_backup]
as
/*
Developed by:			metro
Description:			(Re)Create views for the current records on the [generated] tables

Change log:
Date					Author				Description
20220915 00:00			K. Vermeij			Initial version
20220917 08:25			K. Vermeij			Add [mta_IsDeleted]
*/
declare @LogProcName varchar(max) = '[rep].[022_bld_Recreate_CurrentViews]'
declare @LogNote varchar(max) = '(Re)Create views for the current records on the [bld] tables'
declare @LogSQL varchar(max)
declare @SrcSchema varchar(max) = 'bld'
declare @TgtSchema varchar(max) = 'bld'
-- variables for the loop
declare @CounterNr integer
declare @MaxNr integer
declare @sql1 varchar(max)
declare @sql2 varchar(max)
declare @LongSql varchar(max)
declare @TableName varchar(max)
declare @Msg varchar(max)

if OBJECT_ID('tempdb..#BuildCurrentViews') is not null
	drop table #BuildCurrentViews;

with base
as (
	select table_catalog = t.[TABLE_CATALOG]
		,src_table_schema = t.[TABLE_SCHEMA]
		,src_table_name = t.[TABLE_NAME]
		,src_table_type = t.[TABLE_TYPE]
		,tgt_table_name = rep.[GetNamePart](replace(t.[TABLE_NAME], 'tr_', ''), 2)
		,RowNum = ROW_Number() over (
			partition by rep.[GetNamePart](replace(t.[TABLE_NAME], 'tr_', ''), 2) order by t.[TABLE_NAME]
			)
	from [INFORMATION_SCHEMA].[TABLES] t
	where 1 = 1
		and TABLE_TYPE = 'VIEW'
		and left(t.[TABLE_NAME], 3) = 'tr_'
		and t.TABLE_SCHEMA = @SrcSchema
	)
select *
	,ProcessSequence = Row_Number() over (
		order by tgt_table_name
		)
into #BuildCurrentViews
from base
where RowNum = 1

select @CounterNr = min(ProcessSequence)
	,@MaxNr = max(ProcessSequence)
from #BuildCurrentViews

while (
		@CounterNr is not null
		and @CounterNr <= @MaxNr
		)
begin
	select @TableName = src.tgt_table_name
		,@sql1 = 'if exists(select * from INFORMATION_SCHEMA.[TABLES]  v where table_schema = ''' + @TgtSchema + ''' and table_name=''vw_' + src.tgt_table_name + ''' and TABLE_TYPE=''VIEW'')' + char(10) + 'drop view [' + @TgtSchema + '].[vw_' + src.tgt_table_name + '];'
		,@sql2 = 'create view [' + @TgtSchema + '].vw_' + src.tgt_table_name + ' as' + char(10) + '/*' + char(10) + 'View is generated by	: metro' + char(10) + 'Generated at			: ' + convert(varchar(19), getdate(), 121) + char(10) + '*/' + char(10) + char(10) + 'With Cur as (' + char(10) + char(9) + 'SELECT ' + char(10) + char(9) + char(9) + STRING_AGG('[' + c.[COLUMN_NAME] + ']  as [' + c.[COLUMN_NAME] + ']', ',') WITHIN
	group (
			order by src.tgt_table_name
				,c.[ORDINAL_POSITION] asc
			) + char(10) + char(9) + char(9) + ',[mta_RecType], [mta_CreateDate], [mta_Source], [mta_BK], [mta_BKH], [mta_RH]' + char(10) + char(9) + char(9) + '-- Determine latest record based on create date' + char(10) + char(9) + char(9) + ', [mta_CurrentFlag] = Row_Number() Over (Partition By [mta_BKH] Order by [mta_CreateDate] Desc)' + char(10) + char(9) + 'FROM [' + @SrcSchema + '].[' + src.tgt_table_name + ']' + char(10) + char(9) + 'WHERE 1=1' + char(10) + char(9) + ')' + 'Select ' + char(10) + char(9) + STRING_AGG('[' + c.[COLUMN_NAME] + ']  as [' + c.[COLUMN_NAME] + ']', ',') WITHIN
	group (
			order by src.tgt_table_name
				,c.[ORDINAL_POSITION] asc
			) + char(10) + char(9) + '-- Add "Deleted" indicator, the current view shows the latest record even if deleted. This gives the oppurtunity to delete records in the [bld] schema' + char(10) + char(9) + ',[mta_RecType], [mta_CreateDate], [mta_Source], [mta_BK], [mta_BKH], [mta_RH]' + char(10) + char(9) + ', mta_IsDeleted = iif([mta_RecType]=-1,1,0)' + char(10) + 'From Cur' + char(10) + 'Where [mta_CurrentFlag] = 1 and [mta_RecType]>-1' + char(10)
	--select *
	from #BuildCurrentViews src
	join [INFORMATION_SCHEMA].[COLUMNS] c on c.TABLE_SCHEMA = src_table_schema
		and c.TABLE_NAME = src.tgt_table_name
	where 1 = 1
		and left(c.[COLUMN_NAME], 3) != 'mta'
		and src.ProcessSequence = @CounterNr
	group by src.tgt_table_name

	-- drop views if exists
	print ''
	print (@sql1)

	exec (@sql1)

	set @Msg = 'Drop view bld.vw_' + @TableName

	exec [aud].[proc_Log_Procedure] @LogAction = 'DROP'
		,@LogNote = @Msg
		,@LogProcedure = @LogProcName
		,@LogSQL = @sql1
		,@LogRowCount = 1

	-- create views
	print ''

	--Print	(@sql2)
	set @LongSql = @sql2

	exec rep.Helper_LongPrint @string = @LongSql

	exec (@LongSql)

	set @Msg = 'Create view bld.vw_' + @TableName

	exec [aud].[proc_Log_Procedure] @LogAction = 'CREATE'
		,@LogNote = @Msg
		,@LogProcedure = @LogProcName
		,@LogSQL = @sql2
		,@LogRowCount = 1

	set @CounterNr = @CounterNr + 1
end

set @LogSQL = 'exec ' + @TgtSchema + '.' + @LogProcName

exec [aud].[proc_Log_Procedure] @LogAction = 'INFO'
	,@LogNote = @LogNote
	,@LogProcedure = @LogProcName
	,@LogSQL = @LogSQL
	,@LogRowCount = @MaxNr

-- Cleaning
if OBJECT_ID('tempdb..#BuildCurrentViews') is not null
	drop table #BuildCurrentViews