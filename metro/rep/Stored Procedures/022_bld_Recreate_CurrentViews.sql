

CREATE PROCEDURE [rep].[022_bld_Recreate_CurrentViews]  @tgt_table_name VARCHAR(255) = NULL
AS
BEGIN
    /*
    Developed by:            metro
    Description:             (Re)Create views on the [bld] tables with meta columns: 
                             - mta_BK        (Stores the Businesskey of the table)
                             - mta_BKH       (Stores the hash of the Businesskey of the table)
                             - mta_RH        (Stores the hash of the full row)
                             - mta_RowNum    actually only needed for the view [bld].[vw_XlsTabsToLoad] so i could make an easy loop in this procedure


	examples:
	exec  [rep].[022_bld_Recreate_CurrentViews]

	exec  [rep].[022_bld_Recreate_CurrentViews] @tgt_table_name = 'Schema'

    Change log:
    Date                    Author              Description
    20220915 00:00          K. Vermeij          Initial version
    */

    DECLARE @LogProcName VARCHAR(MAX) = '[bld].[022_bld_Recreate_CurrentViews]'
    DECLARE @LogSQL VARCHAR(MAX)
    DECLARE @SrcSchema VARCHAR(MAX) = 'bld'
    DECLARE @TgtSchema VARCHAR(MAX) = 'bld'
    DECLARE @CounterNr INT
    DECLARE @MaxNr INT
    DECLARE @sqlDrop NVARCHAR(MAX)
    DECLARE @sqlCreate NVARCHAR(MAX)
    DECLARE @TableName VARCHAR(MAX)
    DECLARE @Msg VARCHAR(MAX)
    DECLARE @ColumnList NVARCHAR(MAX)
    DECLARE @ColumnHashList NVARCHAR(MAX)

    BEGIN TRY
        
        IF OBJECT_ID('tempdb..#BuildCurrentViews') IS NOT NULL
            DROP TABLE #BuildCurrentViews;

        WITH base AS (
            SELECT 
                table_catalog = t.[TABLE_CATALOG],
                src_table_schema = t.[TABLE_SCHEMA],
                src_table_name = t.[TABLE_NAME],
                src_table_type = t.[TABLE_TYPE],
                tgt_table_name = rep.[GetNamePart](REPLACE(t.[TABLE_NAME], 'tr_', ''), 2),
                RowNum = ROW_NUMBER() OVER (
                    PARTITION BY rep.[GetNamePart](REPLACE(t.[TABLE_NAME], 'tr_', ''), 2) 
                    ORDER BY t.[TABLE_NAME]
                )
            FROM [INFORMATION_SCHEMA].[TABLES] t
            WHERE 1 = 1
                AND TABLE_TYPE = 'VIEW'
                AND LEFT(t.[TABLE_NAME], 3) = 'tr_'
                AND t.TABLE_SCHEMA = @SrcSchema
				and(rep.[GetNamePart](REPLACE(t.[TABLE_NAME], 'tr_', ''), 2) = @tgt_table_name  or @tgt_table_name is null)
        )
        SELECT *,
            ProcessSequence = ROW_NUMBER() OVER (ORDER BY tgt_table_name)
        INTO #BuildCurrentViews
        FROM base
        WHERE RowNum = 1

        SELECT @CounterNr = MIN(ProcessSequence),
               @MaxNr = MAX(ProcessSequence)
        FROM #BuildCurrentViews

        -- Define the view creation template
        DECLARE @ViewTemplate NVARCHAR(MAX) = '
        CREATE OR ALTER VIEW [{TgtSchema}].[vw_{TableName}] AS
        /*
        View is generated by  : metro
        Generated at          : {GeneratedAt}
        Description           : View on stage table
        */
        WITH Cur AS (
            SELECT 
                {ColumnList},
                [mta_RecType], [mta_CreateDate], [mta_Source], [mta_BK], [mta_BKH], [mta_RH],
                [mta_CurrentFlag] = ROW_NUMBER() OVER (PARTITION BY [mta_BKH] ORDER BY [mta_CreateDate] DESC)
            FROM [{SrcSchema}].[{TableName}]
               
        )
        SELECT 
            {ColumnList},
            [mta_RecType], [mta_CreateDate], [mta_Source], [mta_BK], [mta_BKH], [mta_RH],
            [mta_IsDeleted] = IIF([mta_RecType] = -1, 1, 0)
        FROM Cur
        WHERE [mta_CurrentFlag] = 1 AND [mta_RecType] > -1
        '

        -- Loop through each row in the temporary table
        WHILE @CounterNr IS NOT NULL AND @CounterNr <= @MaxNr
        BEGIN
            -- Get the current table name
            SELECT @TableName = src.tgt_table_name
            FROM #BuildCurrentViews src
            WHERE ProcessSequence = @CounterNr

            -- Generate the column list with transformations
            SELECT @ColumnList = STRING_AGG('[' + c.[COLUMN_NAME] + '] AS [' + c.[COLUMN_NAME] + ']', ', ')
            FROM [INFORMATION_SCHEMA].[COLUMNS] c
            WHERE c.TABLE_SCHEMA = @SrcSchema
              AND c.TABLE_NAME = @TableName
              AND LEFT(c.[COLUMN_NAME], 3) != 'mta'

            -- Replace placeholders in the view template
            SET @sqlCreate = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                @ViewTemplate
                                                , '{SrcSchema}',@SrcSchema)
                                                , '{TgtSchema}', @TgtSchema)
                                                , '{TableName}', @TableName)
                                                , '{ColumnList}', @ColumnList)
                                                , '{GeneratedAt}', CONVERT(VARCHAR, GETDATE(), 120)
                                                )

            -- Create the new view
            PRINT @sqlCreate
            EXEC sp_executesql @sqlCreate

            -- Move to the next row
            SET @CounterNr = @CounterNr + 1
        END

        -- Log the procedure execution
        SET @LogSQL = 'EXEC ' + @TgtSchema + '.' + @LogProcName

        EXEC [aud].[proc_Log_Procedure] 
            @LogAction = 'INFO',
            @LogNote = '(Re)Created views on the [bld] tables with meta columns',
            @LogProcedure = @LogProcName,
            @LogSQL = @LogSQL,
            @LogRowCount = @MaxNr
    END TRY

    BEGIN CATCH
        -- Handle errors
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY()
        DECLARE @ErrorState INT = ERROR_STATE()

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)
    END CATCH
END